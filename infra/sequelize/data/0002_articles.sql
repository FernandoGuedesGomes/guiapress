CREATE TABLE articles (
  id int(11) NOT NULL AUTO_INCREMENT,
  title varchar(255) DEFAULT NULL,
  slug varchar(255) NOT NULL,
  body text,
  createdAt datetime NOT NULL,
  updatedAt datetime NOT NULL,
  categoryId int(11) DEFAULT NULL,
  PRIMARY KEY (id),
  KEY categoryId (categoryId),
  CONSTRAINT articles_ibfk_1 FOREIGN KEY (categoryId) REFERENCES categories (id) ON DELETE SET NULL ON UPDATE CASCADE
) AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
--
INSERT INTO articles VALUES (1,'Como usar o MongoDB e o Mongoose com o Node.js ','Como-usar-o-MongoDB-e-o-Mongoose-com-o-Node.js','<p><img src=\"https://www.freecodecamp.org/portuguese/news/content/images/size/w2000/2023/08/node-mongodb-fundamentals.png\" alt=\"Como usar o MongoDB e o Mongoose com o Node.js &ndash; melhores pr&aacute;ticas para devs de back-end\" width=\"420\" height=\"236\"></p>\r\n<p>Para entender por que precisamos do Mongoose, vamos entender como o MongoDB (e um banco de dados) funciona no n&iacute;vel da arquitetura.</p>\r\n<ul>\r\n<li>Voc&ecirc; tem um servidor de banco de dados (servidor da comunidade do MongoDB, por exemplo)</li>\r\n<li>Voc&ecirc; tem um script do Node.js em execu&ccedil;&atilde;o (como um processo)</li>\r\n</ul>\r\n<p>O servidor do MongoDB escuta em um soquete TCP (normalmente) e o processo do Node.js pode se conectar a ele usando uma conex&atilde;o TCP.</p>\r\n<p>Al&eacute;m do TCP, o MongoDB tamb&eacute;m tem seu pr&oacute;prio protocolo para entender o que exatamente o&nbsp;<em>client</em>&nbsp;(nosso processo do Node.js) quer que o banco de dados fa&ccedil;a.</p>\r\n<p>Para essa comunica&ccedil;&atilde;o, em vez de aprender as mensagens que temos que enviar na camada TCP, abstra&iacute;mos isso com a ajuda de um software de \"driver\", chamado de&nbsp;<em>MongoDB driver</em>, neste caso. O&nbsp;<em>MongoDB driver</em>&nbsp;est&aacute; dispon&iacute;vel como um&nbsp;<a href=\"https://www.npmjs.com/package/mongodb\">pacote do npm aqui</a>.</p>\r\n<p>Agora, lembre-se, o&nbsp;<em>MongoDB driver</em>&nbsp;&eacute; respons&aacute;vel por conectar e abstrair para voc&ecirc; as solicita&ccedil;&otilde;es/respostas de comunica&ccedil;&atilde;o de baixo n&iacute;vel &ndash; &eacute; at&eacute; a&iacute; que voc&ecirc; consegue ir sendo um desenvolvedor.</p>\r\n<p>Como o MongoDB &eacute; um banco de dados sem esquema, ele oferece muito mais poder do que voc&ecirc; precisa como iniciante. Mais pot&ecirc;ncia significa mais &aacute;rea de superf&iacute;cie para erros. Voc&ecirc; precisa reduzir sua &aacute;rea de superf&iacute;cie para gerar menos bugs e erros em seu c&oacute;digo. Voc&ecirc; precisa de algo mais.</p>\r\n<p>Conhe&ccedil;a o Mongoose. O Mongoose &eacute; uma abstra&ccedil;&atilde;o sobre o driver nativo do MongoDB (o pacote npm que mencionei acima).</p>\r\n<p>A regra geral com abstra&ccedil;&otilde;es (do jeito que eu entendo) &eacute; que, a cada abstra&ccedil;&atilde;o, voc&ecirc; perde algum poder de opera&ccedil;&atilde;o de baixo n&iacute;vel. Isso, contudo, n&atilde;o significa necessariamente que seja ruim. &Agrave;s vezes, isso aumenta a produtividade em mais de mil vezes, pois voc&ecirc; nunca precisa realmente ter acesso total &agrave; API subjacente, de todo modo.</p>\r\n<p>Uma boa maneira de pensar sobre isso &eacute; tecnicamente criar uma aplica&ccedil;&atilde;o de bate-papo em tempo real, tanto em C, quanto em Python.</p>\r\n<p>O exemplo do Python seria muito mais f&aacute;cil e r&aacute;pido para voc&ecirc;, como desenvolvedor, implementar com maior produtividade.</p>\r\n<p>O C&nbsp;<em>pode ser</em>&nbsp;mais eficiente, mas ter&aacute; um custo enorme em produtividade/velocidade de desenvolvimento/bugs/travamentos. Al&eacute;m disso, na maioria das vezes, voc&ecirc; n&atilde;o precisa ter o poder que o C oferece para implementar&nbsp;<em>websockets</em>.</p>\r\n<p>Do mesmo modo, com o Mongoose, voc&ecirc; pode limitar sua &aacute;rea de superf&iacute;cie de acesso &agrave; API de n&iacute;vel inferior, mas desbloquear muitos ganhos potenciais e uma boa DX (<em>Developer Experience</em>, ou, em portugu&ecirc;s, experi&ecirc;ncia de desenvolvedor &ndash; em contraste com a experi&ecirc;ncia do usu&aacute;rio, ou UX).</p>\r\n<p>&nbsp;</p>','2023-10-07 15:53:41','2023-10-07 15:53:41',1),(2,'Qual a melhor linguagem de programação?','Qual-a-melhor-linguagem-de-programacao','<p>At&eacute; mesmo se voc&ecirc; &eacute; um curioso inveterado, esse artigo ir&aacute; lhe ser &uacute;til. Veremos qual a melhor linguagem para voc&ecirc; que pretende programar para jogos, para desktop, para smartphones, para Web, qual a melhor linguagem para iniciantes e at&eacute; mesmo, qual a melhor linguagem para o mercado, atualmente.</p>\r\n<p>Bom, existem mais de 100 linguagens diferentes &agrave; disposi&ccedil;&atilde;o dos desenvolvedores de software e se voc&ecirc; perguntar para 10 programadores qual a melhor, provavelmente obter&aacute; 10 respostas diferentes. Onde focar, ent&atilde;o? Para come&ccedil;ar, tenha em mente que n&atilde;o existe uma melhor linguagem de programa&ccedil;&atilde;o, e que, essa melhor linguagem, ser&aacute; na verdade aquela que voc&ecirc; compreende a fundo e mais do que isso, aquela que melhor se aplica aos seus prop&oacute;sitos.</p>','2023-10-07 15:54:23','2023-10-07 15:54:23',2),(3,'<article> - HTML','lessarticlegreater-HTML','<p>O&nbsp;<em>Elemento HTML Article</em>&nbsp;(&lt;article&gt;) representa uma composi&ccedil;&atilde;o independente em um documento, p&aacute;gina, aplica&ccedil;&atilde;o, ou site, ou que &eacute; destinado a ser distribuido de forma independente ou reutiliz&aacute;vel, por exemplo, em sindica&ccedil;&atilde;o. Este poderia ser o post de um f&oacute;rum, um artigo de revista ou jornal, um post de um blog, um coment&aacute;rio enviado por um usu&aacute;rio, um gadget ou widget interativos, ou qualquer outra forma de conte&uacute;do independente.</p>\r\n<blockquote>\r\n<p><strong>Note:</strong>&nbsp;<em>Notas de uso:</em></p>\r\n<ul>\r\n<li>Quando um elemento&nbsp;<code>&lt;article&gt;</code>&nbsp;est&aacute; aninhado, o elemento interior representa um artigo relacionado com o elemento exterior. Por exemplo, os coment&aacute;rios do post de um blog podem ser elementos&nbsp;<code>&lt;article&gt;</code>&nbsp;aninhados em&nbsp;<code>&lt;article&gt;</code>&nbsp;representando o post do blog.</li>\r\n<li>Informa&ccedil;&otilde;es sobre o autor de um elemento&nbsp;<code>&lt;article&gt;</code>&nbsp;podem ser fornecidas atrav&eacute;s do elemento&nbsp;<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/address\"><code>&lt;address&gt;</code></a>&nbsp;,mas ele n&atilde;o se aplica aos elementos&nbsp;<code>&lt;article&gt;</code>&nbsp;aninhados.</li>\r\n<li>A data e hora de publica&ccedil;&atilde;o de um elemento&nbsp;<code>&lt;article&gt;</code>&nbsp;pode ser descrita usando o atributo&nbsp;<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/time#pubdate\"><code>pubdate</code></a>&nbsp;de um elemento&nbsp;<a href=\"https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/time\"><code>&lt;time&gt;</code></a>.</li>\r\n</ul>\r\n</blockquote>','2023-10-07 15:55:20','2023-10-07 15:55:20',3),(4,'Angular Filter e pipes','Angular-Filter-e-pipes','<p><strong>Filtros servem para formatar dados. Eles s&atilde;o utilizados nos templates dos componentes, geralmente para apresentar datas e valores monet&aacute;rios em um formato familiar para os usu&aacute;rios</strong>.</p>\r\n<p>Por exemplo, com o filtro date &eacute; poss&iacute;vel formatar uma data para um formato familiar para o usu&aacute;rio, como vemos no&nbsp;<strong>C&oacute;digo 1</strong>.</p>\r\n<p>Nele temos a propriedade hoje do componente AppComponent sendo apresentada de duas formas. A primeira delas &eacute; sem nenhum filtro, onde usamos a sintaxe conhecida&nbsp;<span class=\"lf-badge\">{{ hoje }}</span>&nbsp;para apresentar a propriedade. A segunda &eacute; aplicando o filtro date e para fazer isso usamos a sintaxe&nbsp;<span class=\"lf-badge\">{{ hoje | date }}</span>, onde&nbsp;<span class=\"lf-badge\">|</span> &eacute; o operador pipe e date &eacute; o filtro que queremos aplicar.</p>','2023-10-07 15:56:15','2023-10-07 15:56:15',4);
